//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CDTControl.com.phanmemsgd.www1 {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="https://wwww.phanmemsgd.com/Service")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetKeyBPMOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyDirectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserLoginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::CDTControl.Properties.Settings.Default.CDTControl_com_phanmemsgd_www1_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetKeyBPMCompletedEventHandler GetKeyBPMCompleted;
        
        /// <remarks/>
        public event GetKeyCompletedEventHandler GetKeyCompleted;
        
        /// <remarks/>
        public event GetKeyDirectCompletedEventHandler GetKeyDirectCompleted;
        
        /// <remarks/>
        public event CheckUserLoginCompletedEventHandler CheckUserLoginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://wwww.phanmemsgd.com/Service/GetKeyBPM", RequestNamespace="https://wwww.phanmemsgd.com/Service", ResponseNamespace="https://wwww.phanmemsgd.com/Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyBPM(string companyName, string Product, string Maskcode, string userName, string password) {
            object[] results = this.Invoke("GetKeyBPM", new object[] {
                        companyName,
                        Product,
                        Maskcode,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyBPMAsync(string companyName, string Product, string Maskcode, string userName, string password) {
            this.GetKeyBPMAsync(companyName, Product, Maskcode, userName, password, null);
        }
        
        /// <remarks/>
        public void GetKeyBPMAsync(string companyName, string Product, string Maskcode, string userName, string password, object userState) {
            if ((this.GetKeyBPMOperationCompleted == null)) {
                this.GetKeyBPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyBPMOperationCompleted);
            }
            this.InvokeAsync("GetKeyBPM", new object[] {
                        companyName,
                        Product,
                        Maskcode,
                        userName,
                        password}, this.GetKeyBPMOperationCompleted, userState);
        }
        
        private void OnGetKeyBPMOperationCompleted(object arg) {
            if ((this.GetKeyBPMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyBPMCompleted(this, new GetKeyBPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://wwww.phanmemsgd.com/Service/GetKey", RequestNamespace="https://wwww.phanmemsgd.com/Service", ResponseNamespace="https://wwww.phanmemsgd.com/Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKey(string companyName, string Product, string Maskcode, string userName, string password) {
            object[] results = this.Invoke("GetKey", new object[] {
                        companyName,
                        Product,
                        Maskcode,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyAsync(string companyName, string Product, string Maskcode, string userName, string password) {
            this.GetKeyAsync(companyName, Product, Maskcode, userName, password, null);
        }
        
        /// <remarks/>
        public void GetKeyAsync(string companyName, string Product, string Maskcode, string userName, string password, object userState) {
            if ((this.GetKeyOperationCompleted == null)) {
                this.GetKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyOperationCompleted);
            }
            this.InvokeAsync("GetKey", new object[] {
                        companyName,
                        Product,
                        Maskcode,
                        userName,
                        password}, this.GetKeyOperationCompleted, userState);
        }
        
        private void OnGetKeyOperationCompleted(object arg) {
            if ((this.GetKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyCompleted(this, new GetKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://wwww.phanmemsgd.com/Service/GetKeyDirect", RequestNamespace="https://wwww.phanmemsgd.com/Service", ResponseNamespace="https://wwww.phanmemsgd.com/Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKeyDirect(string companyName, string Product, string Key, string userName, string password) {
            object[] results = this.Invoke("GetKeyDirect", new object[] {
                        companyName,
                        Product,
                        Key,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKeyDirectAsync(string companyName, string Product, string Key, string userName, string password) {
            this.GetKeyDirectAsync(companyName, Product, Key, userName, password, null);
        }
        
        /// <remarks/>
        public void GetKeyDirectAsync(string companyName, string Product, string Key, string userName, string password, object userState) {
            if ((this.GetKeyDirectOperationCompleted == null)) {
                this.GetKeyDirectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyDirectOperationCompleted);
            }
            this.InvokeAsync("GetKeyDirect", new object[] {
                        companyName,
                        Product,
                        Key,
                        userName,
                        password}, this.GetKeyDirectOperationCompleted, userState);
        }
        
        private void OnGetKeyDirectOperationCompleted(object arg) {
            if ((this.GetKeyDirectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyDirectCompleted(this, new GetKeyDirectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://wwww.phanmemsgd.com/Service/CheckUserLogin", RequestNamespace="https://wwww.phanmemsgd.com/Service", ResponseNamespace="https://wwww.phanmemsgd.com/Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUserLogin(string userName, string password) {
            object[] results = this.Invoke("CheckUserLogin", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserLoginAsync(string userName, string password) {
            this.CheckUserLoginAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void CheckUserLoginAsync(string userName, string password, object userState) {
            if ((this.CheckUserLoginOperationCompleted == null)) {
                this.CheckUserLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserLoginOperationCompleted);
            }
            this.InvokeAsync("CheckUserLogin", new object[] {
                        userName,
                        password}, this.CheckUserLoginOperationCompleted, userState);
        }
        
        private void OnCheckUserLoginOperationCompleted(object arg) {
            if ((this.CheckUserLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserLoginCompleted(this, new CheckUserLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyBPMCompletedEventHandler(object sender, GetKeyBPMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyBPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyBPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyCompletedEventHandler(object sender, GetKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void GetKeyDirectCompletedEventHandler(object sender, GetKeyDirectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyDirectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyDirectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CheckUserLoginCompletedEventHandler(object sender, CheckUserLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591